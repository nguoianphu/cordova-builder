# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ release ]
  pull_request:
    branches: [ release ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a single command using the runners shell
    - name: Install tools
      run: |
        sudo npm install -g cordova@latest

    # Runs a set of commands using the runners shell
    - name: Extract ZIP www with password
      env:
       MY_ZIP_PASSWORD: ${{ secrets.MY_ZIP_PASSWORD }}	
      run: |
        cd $GITHUB_WORKSPACE
        echo "Remove the default www and replace it by your zipped"
        rm -rf www | true
        sudo apt-get install -y p7zip-full
        7z x -p${MY_ZIP_PASSWORD} www.zip
        ls -la

    # Runs a set of commands using the runners shell
    - name: Call Cordova builder
      run: |
        cd $GITHUB_WORKSPACE/www
        echo "Adding Platforms"
        cordova platform add android
        cordova platforms ls
        echo "Adding Plugins"
        cordova plugin ls
        echo "Building apk for Android"
        cordova build android --release
        echo "Built the following apk:"
        cp -vR $GITHUB_WORKSPACE/platforms/android/app/build/outputs/apk/release/* $GITHUB_WORKSPACE/
        cd $GITHUB_WORKSPACE
        ls -la

    - name: Generate and sign Java keytool
      env:
       MY_ZIP_PASSWORD: ${{ secrets.MY_ZIP_PASSWORD }}
       BUILD_TOOLS: '29.0.3'
      run: |
        cd $GITHUB_WORKSPACE
        echo "Signing our apk"
        mkdir -p keys
        echo "Generate a Private Certificate by keytool"
        echo "https://developer.android.com/studio/build/building-cmdline#sign_cmdline"
        keytool -genkey -v -noprompt \
         -alias my-android-release-key \
         -keystore $GITHUB_WORKSPACE/keys/my-android-release-key.jks \
         -keyalg RSA -keysize 2048 -validity 10000 \
         -storepass ${MY_ZIP_PASSWORD} \
         -keypass ${MY_ZIP_PASSWORD} \
         -dname "CN=nguoianphu.com, OU=NA, O=Company, L=HOCHIMINH, S=HOCHIMINH, C=VN"
        echo "Export the certificate for the upload key to PEM format"
        keytool -export -rfc -v -noprompt \
            -storepass ${MY_ZIP_PASSWORD} \
            -keypass ${MY_ZIP_PASSWORD} \
            -keystore $GITHUB_WORKSPACE/keys/my-android-release-key.jks \
            -alias my-android-release-key \
            -file $GITHUB_WORKSPACE/keys/my-android-release-upload-certificat.pem
        echo "Sign the APK with the key we just created"

        cd $ANDROID_SDK_ROOT/build-tools/$BUILD_TOOLS
        echo "Align the unsigned APK using zipalign"
        ./zipalign -v 4 \
            $GITHUB_WORKSPACE/app-release-unsigned.apk \
            $GITHUB_WORKSPACE/app-release-unsigned-aligned.apk
        echo "Sign your APK with your private key using apksigner"
        ./apksigner sign \
            --ks $GITHUB_WORKSPACE/keys/my-android-release-key.jks \
            --ks-key-alias my-android-release-key \
            --ks-pass pass:${MY_ZIP_PASSWORD} \
            --key-pass pass:${MY_ZIP_PASSWORD} \
            --out $GITHUB_WORKSPACE/app-release.apk \
            $GITHUB_WORKSPACE/app-release-unsigned-aligned.apk
        echo "Verify that your APK is signed \
                to confirm that an APK's signature \
                will be verified successfully \
                on all versions of the Android platform supported by the APK"
        ./apksigner verify --verbose --print-certs $GITHUB_WORKSPACE/app-release.apk
        cd $GITHUB_WORKSPACE/
        ls -la
        echo "zip key and certificate with password"
        7z a -tzip -p${MY_ZIP_PASSWORD} keys.zip -r keys		

    - name: Create Release		
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GIT_COMMIT: $(git log --format=%h -1)
      with:
        tag_name: ${{ github.ref }}_${GIT_COMMIT}
        release_name: Release ${{ github.ref }} ${GIT_COMMIT}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        file: |
         ./app-release.apk
         ./keys.zip
        asset_content_type: application/zip
