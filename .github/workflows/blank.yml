# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ release ]
  pull_request:
    branches: [ release ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: set up JDK 8
      uses: actions/setup-java@v2
      with:
        java-version: '8'
        distribution: 'adopt'
    # Runs a single command using the runners shell
    - name: Install tools
      run: |
        sudo npm install -g cordova@latest

    # Runs a set of commands using the runners shell
    - name: Extract ZIP www with password
      env:
       MY_ZIP_PASSWORD: ${{ secrets.MY_ZIP_PASSWORD }}	
      run: |
        cd $GITHUB_WORKSPACE
        echo "Remove the default www and replace it by your zipped"
        rm -rf www | true
        sudo apt-get install -y p7zip-full
        7z x -p${MY_ZIP_PASSWORD} www.zip
        ls -la

    # Runs a set of commands using the runners shell
    - name: Call Cordova builder
      run: |
        mkdir -p $GITHUB_WORKSPACE/artifact/
        mkdir -p $GITHUB_WORKSPACE/keys/
        cd $GITHUB_WORKSPACE/www
        # Add android platform to the project and remember that in config.xml & package.json.
        cordova platform add android
        # Check to see if your system is configured for building android platform.
        cordova requirements android
        # Build the android and emit verbose logs.
        cordova build android --debug --verbose
        # Build for android platform in release mode
        cordova build android --release --verbose
        # Build an Android App Bundle (.aab) file
        cordova build android --release --verbose -- --packageType=bundle
        echo "Built the following apk:"
        cp -vR $GITHUB_WORKSPACE/platforms/android/app/build/outputs/apk/debug/* $GITHUB_WORKSPACE/artifact/
        cp -vR $GITHUB_WORKSPACE/platforms/android/app/build/outputs/apk/release/* $GITHUB_WORKSPACE/artifact/
        ls -la $GITHUB_WORKSPACE/artifact/

    - name: Generate and sign Java keytool
      env:
       MY_ZIP_PASSWORD: ${{ secrets.MY_ZIP_PASSWORD }}
       BUILD_TOOLS: '29.0.3'
      run: |
        cd $GITHUB_WORKSPACE
        echo "Signing our apk"
        echo "https://ionicframework.com/docs/deployment/play-store"
        echo "https://reactnative.dev/docs/signed-apk-android"
        mkdir -p keys
        echo "Generate a Private Certificate by keytool"
        echo "https://developer.android.com/studio/build/building-cmdline#sign_cmdline"
        keytool -genkeypair -v -noprompt \
         -storetype PKCS12 \
         -alias my-android-release-key \
         -keystore $GITHUB_WORKSPACE/keys/my-android-release-key.keystore \
         -keyalg RSA -keysize 2048 -validity 10000 \
         -storepass ${MY_ZIP_PASSWORD} \
         -keypass ${MY_ZIP_PASSWORD} \
         -dname "CN=nguoianphu.com, OU=NA, O=Company, L=HOCHIMINH, S=HOCHIMINH, C=VN"
        echo "Export the certificate for the upload key to PEM format"
        keytool -export -rfc -v -noprompt \
            -storepass ${MY_ZIP_PASSWORD} \
            -keypass ${MY_ZIP_PASSWORD} \
            -keystore $GITHUB_WORKSPACE/keys/my-android-release-key.keystore \
            -alias my-android-release-key \
            -file $GITHUB_WORKSPACE/keys/my-android-release-upload-certificat.pem
        echo "Sign the APK with the key we just created"
        cd $ANDROID_SDK_ROOT/build-tools/$BUILD_TOOLS
        echo "Align the unsigned APK using zipalign"
        ./zipalign -v 4 \
            $GITHUB_WORKSPACE/artifact/app-release-unsigned.apk \
            $GITHUB_WORKSPACE/artifact/app-release-unsigned-aligned.apk
        echo "Sign your APK with your private key using apksigner"
        ./apksigner sign \
            --ks $GITHUB_WORKSPACE/keys/my-android-release-key.keystore \
            --ks-key-alias my-android-release-key \
            --ks-pass pass:${MY_ZIP_PASSWORD} \
            --key-pass pass:${MY_ZIP_PASSWORD} \
            --out $GITHUB_WORKSPACE/artifact/app-release.apk \
            $GITHUB_WORKSPACE/artifact/app-release-unsigned-aligned.apk
        echo "Verify that your APK is signed \
                to confirm that an APK's signature \
                will be verified successfully \
                on all versions of the Android platform supported by the APK"
        ./apksigner verify --verbose --print-certs $GITHUB_WORKSPACE/artifact/app-release.apk
        cd $GITHUB_WORKSPACE/
        ls -la artifact
        echo "zip keys and certificates with password"
        7z a -tzip -p${MY_ZIP_PASSWORD} artifact/keys.zip -r keys
        
        
    - name: Create tag
      run: |
        cd $GITHUB_WORKSPACE
        export DATE=$(date +'DATE_%Y_%m_%d_%H%M%S')
        export GIT_COMMIT=COMMIT_$(git log --format=%h -1)
        export APP_NAME=$(cat www/config.xml | grep \<name\> | cut -d '>' -f2 | cut -d '<' -f1)
        export APP_VERSION_CURRENT=$(cat www/config.xml | grep widget | grep id | grep version | cut -d '"' -f4)
        export APK_NAME=${APP_NAME}-${APP_VERSION_CURRENT}-${DATE}-${GIT_COMMIT}
        export APK_NAME=${APK_NAME// /}
        export TAG=${TAG:-${APK_NAME}}
        git tag ${TAG// /}
        git tag -l
        echo "TAG=$TAG" >> $GITHUB_ENV
        
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{env.TAG}}
        files: |
          artifact/keys.zip
          artifact/*.apk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Archive artifacts
      uses: actions/upload-artifact@v2
      with:
        name: build-outputs-ubuntu
        path: |
          artifact/keys.zip
          artifact/*.apk
          